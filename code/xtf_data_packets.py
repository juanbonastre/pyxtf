from xtf_chaninfo import XTFChanInfo
from constants import XTF_PING_HEADER_SIZE, XTF_PING_CHAN_HEADER_SIZE
from utils import byte_to_int, bytes_to_dword, bytes_to_int_list, bytes_to_string, bytes_to_word, bytes_to_word_list, bytes_to_double, bytes_to_float, bytes_to_short

class XTFDataPacket():
    MagicNumber: int
    HeaderType: int
    def __init__(self, byte_array, _) -> None:
        self.MagicNumber = bytes_to_word(byte_array[0:2])
        self.HeaderType = byte_to_int(byte_array[2:3])
    def print(self):
        print("XTF DATA PACKET")
        print("\tMagicNumber: {}".format(self.MagicNumber))
        print("\tHeaderType: {}".format(self.HeaderType))

class XTFHeaderNotes(XTFDataPacket):
    HeaderType: int
    SubChannelNumber: int
    NumChansToFollow: int
    """2 bytes length"""
    Reserved: list[int]
    NumBytesThisRecord: int

    Year: int
    Month: int
    Day: int
    Hour: int
    Minute: int
    Second: int
    ReservedBytes: int

    def __init__(self, byte_array, _) -> None:
        super().__init__(byte_array, _)
        self.SubChannelNumber = byte_to_int(byte_array[3:4])
        self.NumChansToFollow = bytes_to_word(byte_array[4:6])
        self.Reserved = bytes_to_word_list(byte_array[6:10])
        self.NumBytesThisRecord = bytes_to_dword(byte_array[10:14])
        self.Year = bytes_to_word(byte_array[14:16])
        self.Month = byte_to_int(byte_array[16:17])
        self.Day = byte_to_int(byte_array[17:18])
        self.Hour = byte_to_int(byte_array[18:19])
        self.Minute = byte_to_int(byte_array[19:20])
        self.Second = bytes_to_int_list(byte_array[20:21])
        self.ReservedBytes = bytes_to_int_list(byte_array[21:56])
        self.NotesText = bytes_to_string(byte_array[56:256])

    def print(self):
        print("XTF HEADER NOTES")
        print("\tMagicNumber: {}".format(self.MagicNumber))
        print("\tHeaderType: {}".format(self.HeaderType))
        print("\tSubChannelNumber: {}".format(self.SubChannelNumber))
        print("\tNumChansToFollow: {}".format(self.NumChansToFollow))
        print("\tReserved: {}".format(self.Reserved))
        print("\tNumBytesThisRecord: {}".format(self.NumBytesThisRecord))
        print("\tYear: {}".format(self.Year))
        print("\tMonth: {}".format(self.Month))
        print("\tDay: {}".format(self.Day))
        print("\tHour: {}".format(self.Hour))
        print("\tMinute: {}".format(self.Minute))
        print("\tSecond: {}".format(self.Second))
        print("\tReservedBytes: {}".format(self.ReservedBytes))
        print("\tNotesText: {}".format(self.NotesText))

class XTFPingChanHeader(XTFDataPacket):
    def __init__(self, byte_array: bytearray, XTF_chan_info_list: list[XTFChanInfo]) -> None:
        super().__init__(byte_array, None)
        self.ChannelNumber = bytes_to_word(byte_array[0:2])
        self.DownsampleMethod = bytes_to_word(byte_array[2:4])
        self.SlantRange = bytes_to_float(byte_array[4:8])
        self.GroundRange = bytes_to_float(byte_array[8:12])
        self.TimeDelay = bytes_to_float(byte_array[12:16])
        self.TimeDuration = bytes_to_float(byte_array[16:20])
        self.SecondsPerPing = bytes_to_float(byte_array[20:24])
        self.ProcessingFlags = bytes_to_word(byte_array[24:26])
        self.Frequency = bytes_to_word(byte_array[26:28])
        self.InitialGainCode = bytes_to_word(byte_array[28:30])
        self.GainCode = bytes_to_word(byte_array[30:32])
        self.BandWidth = bytes_to_word(byte_array[32:34])
        self.ContactNumber = bytes_to_dword(byte_array[34:38])
        self.ContactClassification = bytes_to_word(byte_array[38:40])
        self.ContactSubNumber = byte_to_int(byte_array[40:41])
        self.ContactType = byte_to_int(byte_array[41:42])
        self.NumSamples = bytes_to_dword(byte_array[42:46])
        self.MillivoltScale = bytes_to_word(byte_array[46:48])
        self.ContactTimeOffTrack = bytes_to_float(byte_array[48:52])
        self.ContactCloseNumber = byte_to_int(byte_array[52:53])
        self.Reserved2 = byte_to_int(byte_array[53:54])
        self.FixedVSOP = bytes_to_float(byte_array[54:58])
        self.Weight = bytes_to_short(byte_array[58:60])
        self.ReservedSpace = bytes_to_int_list(byte_array[60:64])

        XTF_chan_info = next((ci for ci in XTF_chan_info_list if ci.SubChannelNumber == self.ChannelNumber), None)
        end_pos = XTF_PING_CHAN_HEADER_SIZE + self.NumSamples * XTF_chan_info.BytesPerSample
        self.data_bytes = bytes_to_word_list(byte_array[XTF_PING_CHAN_HEADER_SIZE : end_pos])

    def print(self):
        print("\t\tXTF PING CHAN HEADER")
        print("\t\tChannelNumber: {}".format(self.ChannelNumber))
        print("\t\tDownsampleMethod: {}".format(self.DownsampleMethod))
        print("\t\tSlantRange: {}".format(self.SlantRange))
        print("\t\tGroundRange: {}".format(self.GroundRange))
        print("\t\tTimeDelay: {}".format(self.TimeDelay))
        print("\t\tTimeDuration: {}".format(self.TimeDuration))
        print("\t\tSecondsPerPing: {}".format(self.SecondsPerPing))
        print("\t\tProcessingFlags: {}".format(self.ProcessingFlags))
        print("\t\tFrequency: {}".format(self.Frequency))
        print("\t\tInitialGainCode: {}".format(self.InitialGainCode))
        print("\t\tGainCode: {}".format(self.GainCode))
        print("\t\tBandWidth: {}".format(self.BandWidth))
        print("\t\tContactNumber: {}".format(self.ContactNumber))
        print("\t\tContactClassification: {}".format(self.ContactClassification))
        print("\t\tContactSubNumber: {}".format(self.ContactSubNumber))
        print("\t\tContactType: {}".format(self.ContactType))
        print("\t\tNumSamples: {}".format(self.NumSamples))
        print("\t\tMillivoltScale: {}".format(self.MillivoltScale))
        print("\t\tContactTimeOffTrack: {}".format(self.ContactTimeOffTrack))
        print("\t\tContactCloseNumber: {}".format(self.ContactCloseNumber))
        print("\t\tReserved2: {}".format(self.Reserved2))
        print("\t\tFixedVSOP: {}".format(self.FixedVSOP))
        print("\t\tWeight: {}".format(self.Weight))
        print("\t\tReservedSpace: ".format(self.ReservedSpace))
        print("\t\tLength of data: {} {}".format(len(self.data_bytes), self.data_bytes[0:10]))

class XTFPingHeader(XTFDataPacket):
    XTF_ping_chan_header_list: list[XTFPingChanHeader]

    def __init__(self, byte_array, XTF_chan_info_list: list[XTFChanInfo]) -> None:
        super().__init__(byte_array, None)
        self.SubChannelNumber = byte_to_int(byte_array[3:4])
        self.NumChansToFollow = bytes_to_word(byte_array[4:6])
        self.Reserved1 = bytes_to_word_list(byte_array[6:10])
        self.NumBytesThisRecord = bytes_to_dword(byte_array[10:14])
        self.Year = bytes_to_word(byte_array[14:16])
        self.Month = byte_to_int(byte_array[16:17])
        self.Day = byte_to_int(byte_array[17:18])
        self.Hour = byte_to_int(byte_array[18:19])
        self.Minute = byte_to_int(byte_array[19:20])
        self.Second = bytes_to_int_list(byte_array[20:21])
        self.HSeconds = byte_to_int(byte_array[21:22])
        self.JulianDay = bytes_to_word(byte_array[22:24])
        self.EventNumber = bytes_to_dword(byte_array[24:28])
        self.PingNumber = bytes_to_dword(byte_array[28:32])
        self.SoundVelocity = bytes_to_float(byte_array[32:36])
        self.OceanTide = bytes_to_float(byte_array[36:40])
        self.Reserved2 = bytes_to_dword(byte_array[40:44])
        self.ConductivityFreq = bytes_to_float(byte_array[44:48])
        self.TemperatureFreq = bytes_to_float(byte_array[48:52])
        self.PressureFreq = bytes_to_float(byte_array[52:56])
        self.PressureTemp = bytes_to_float(byte_array[56:60])
        self.Conductivity = bytes_to_float(byte_array[60:64])
        self.WaterTemperature = bytes_to_float(byte_array[64:68])
        self.Pressure = bytes_to_float(byte_array[68:72])
        self.ComputedSoundVelocity = bytes_to_float(byte_array[72:76])
        self.MagX = bytes_to_float(byte_array[76:80])
        self.MagY = bytes_to_float(byte_array[80:84])
        self.MagZ = bytes_to_float(byte_array[84:88])
        self.AuxVal1 = bytes_to_float(byte_array[88:92])
        self.AuxVal2 = bytes_to_float(byte_array[92:96])
        self.AuxVal3 = bytes_to_float(byte_array[96:100])
        self.Reserved3 = bytes_to_float(byte_array[100:104])
        self.Reserved4 = bytes_to_float(byte_array[104:108])
        self.Reserved5 = bytes_to_float(byte_array[108:112])
        self.SpeedLog = bytes_to_float(byte_array[112:116])
        self.Turbidity = bytes_to_float(byte_array[116:120])
        self.ShipSpeed = bytes_to_float(byte_array[120:124])
        self.ShipGyro = bytes_to_float(byte_array[124:128])
        self.ShipYcoordinate = bytes_to_double(byte_array[128:136])
        self.ShipXcoordinate = bytes_to_double(byte_array[136:144])
        self.ShipAltitude = bytes_to_word(byte_array[144:146])
        self.ShipDepth = bytes_to_word(byte_array[146:148])
        self.FixTimeHour = byte_to_int(byte_array[148:149])
        self.FixTimeMinute = byte_to_int(byte_array[149:150])
        self.FixTimeSecond = byte_to_int(byte_array[150:151])
        self.FixTimeHsecond = byte_to_int(byte_array[151:152])
        self.SensorSpeed = bytes_to_float(byte_array[152:156])
        self.KP = bytes_to_float(byte_array[156:160])
        self.SensorYcoordinate = bytes_to_double(byte_array[160:168])
        self.SensorXcoordinate = bytes_to_double(byte_array[168:176])
        self.SonarStatus = bytes_to_word(byte_array[176:178])
        self.RangeToFish = bytes_to_word(byte_array[178:180])
        self.BearingToFish = bytes_to_word(byte_array[180:182])
        self.CableOut = bytes_to_word(byte_array[182:184])
        self.Layback = bytes_to_float(byte_array[184:188])
        self.CableTension = bytes_to_float(byte_array[188:192])
        self.SensorDepth = bytes_to_float(byte_array[192:196])
        self.SensorPrimaryAltitude = bytes_to_float(byte_array[196:200])
        self.SensorAuxAltitude = bytes_to_float(byte_array[200:204])
        self.SensorPitch = bytes_to_float(byte_array[204:208])
        self.SensorRoll = bytes_to_float(byte_array[208:212])
        self.SensorHeading = bytes_to_float(byte_array[212:216])
        self.Heave = bytes_to_float(byte_array[216:220])
        self.Yaw = bytes_to_float(byte_array[220:224])
        self.AttitudeTimeTag = bytes_to_dword(byte_array[224:228])
        self.DOT = bytes_to_float(byte_array[228:232])
        self.NavFixMilliseconds = bytes_to_dword(byte_array[232:236])
        self.ComputerClockHour = byte_to_int(byte_array[236:237])
        self.ComputerClockMinute = byte_to_int(byte_array[237:238])
        self.ComputerClockSecond = byte_to_int(byte_array[238:239])
        self.ComputerClockHsec = byte_to_int(byte_array[239:240])
        self.FishPositionDeltaX = bytes_to_short(byte_array[240:242])
        self.FishPositionDeltaY = bytes_to_short(byte_array[242:244])
        self.FishPositionErrorCode = byte_to_int(byte_array[244:245])
        self.OptionalOffset = bytes_to_dword(byte_array[245:249])
        self.CableOutHundredths = byte_to_int(byte_array[249:250])
        self.ReservedSpace2 = bytes_to_int_list(byte_array[250:256])

        self.XTF_ping_chan_header_list = []
        last_data_size = 0
        for n in range(0, self.NumChansToFollow):
            pos = XTF_PING_HEADER_SIZE + (XTF_PING_CHAN_HEADER_SIZE + last_data_size) * n

            XTF_ping_chan_header = XTFPingChanHeader(byte_array[pos:], XTF_chan_info_list)
            self.XTF_ping_chan_header_list.append(XTF_ping_chan_header)

            XTF_chan_info = next((ci for ci in XTF_chan_info_list if ci.SubChannelNumber == XTF_ping_chan_header.ChannelNumber), None)
            last_data_size = XTF_ping_chan_header.NumSamples * XTF_chan_info.BytesPerSample

    def print(self):
        print("XTF PING HEADER")
        print("\tMagicNumber: {}".format(self.MagicNumber))
        print("\tHeaderType: {}".format(self.HeaderType))
        print("\tSubChannelNumber: {}".format(self.SubChannelNumber))
        print("\tNumChansToFollow: {}".format(self.NumChansToFollow))
        print("\tReserved1: {}".format(self.Reserved1))
        print("\tNumBytesThisRecord: {}".format(self.NumBytesThisRecord))
        print("\tYear: {}".format(self.Year))
        print("\tMonth: {}".format(self.Month))
        print("\tDay: {}".format(self.Day))
        print("\tHour: {}".format(self.Hour))
        print("\tMinute: {}".format(self.Minute))
        print("\tSecond: {}".format(self.Second))
        print("\tHSeconds: {}".format(self.HSeconds))
        print("\tJulianDay: {}".format(self.JulianDay))
        print("\tEventNumber: {}".format(self.EventNumber))
        print("\tPingNumber: {}".format(self.PingNumber))
        print("\tSoundVelocity: {}".format(self.SoundVelocity))
        print("\tOceanTide: {}".format(self.OceanTide))
        print("\tReserved2: {}".format(self.Reserved2))
        print("\tConductivityFreq: {}".format(self.ConductivityFreq))
        print("\tTemperatureFreq: {}".format(self.TemperatureFreq))
        print("\tPressureFreq: {}".format(self.PressureFreq))
        print("\tPressureTemp: {}".format(self.PressureTemp))
        print("\tConductivity: {}".format(self.Conductivity))
        print("\tWaterTemperature: {}".format(self.WaterTemperature))
        print("\tPressure: {}".format(self.Pressure))
        print("\tComputedSoundVelocity: {}".format(self.ComputedSoundVelocity))
        print("\tMagX: {}".format(self.MagX))
        print("\tMagY: {}".format(self.MagY))
        print("\tMagZ: {}".format(self.MagZ))
        print("\tAuxVal1: {}".format(self.AuxVal1))
        print("\tAuxVal2: {}".format(self.AuxVal2))
        print("\tAuxVal3: {}".format(self.AuxVal3))
        print("\tReserved3: {}".format(self.Reserved3))
        print("\tReserved4: {}".format(self.Reserved4))
        print("\tReserved5: {}".format(self.Reserved5))
        print("\tSpeedLog: {}".format(self.SpeedLog))
        print("\tTurbidity: {}".format(self.Turbidity))
        print("\tShipSpeed: {}".format(self.ShipSpeed))
        print("\tShipGyro: {}".format(self.ShipGyro))
        print("\tShipYcoordinate: {}".format(self.ShipYcoordinate))
        print("\tShipXcoordinate: {}".format(self.ShipXcoordinate))
        print("\tShipAltitude: {}".format(self.ShipAltitude))
        print("\tShipDepth: {}".format(self.ShipDepth))
        print("\tFixTimeHour: {}".format(self.FixTimeHour))
        print("\tFixTimeMinute: {}".format(self.FixTimeMinute))
        print("\tFixTimeSecond: {}".format(self.FixTimeSecond))
        print("\tFixTimeHsecond: {}".format(self.FixTimeHsecond))
        print("\tSensorSpeed: {}".format(self.SensorSpeed))
        print("\tKP: {}".format(self.KP))
        print("\tSensorYcoordinate: {}".format(self.SensorYcoordinate))
        print("\tSensorXcoordinate: {}".format(self.SensorXcoordinate))
        print("\tSonarStatus: {}".format(self.SonarStatus))
        print("\tRangeToFish: {}".format(self.RangeToFish))
        print("\tBearingToFish: {}".format(self.BearingToFish))
        print("\tCableOut: {}".format(self.CableOut))
        print("\tLayback: {}".format(self.Layback))
        print("\tCableTension: {}".format(self.CableTension))
        print("\tSensorDepth: {}".format(self.SensorDepth))
        print("\tSensorPrimaryAltitude: {}".format(self.SensorPrimaryAltitude))
        print("\tSensorAuxAltitude: {}".format(self.SensorAuxAltitude))
        print("\tSensorPitch: {}".format(self.SensorPitch))
        print("\tSensorRoll: {}".format(self.SensorRoll))
        print("\tSensorHeading: {}".format(self.SensorHeading))
        print("\tHeave: {}".format(self.Heave))
        print("\tYaw: {}".format(self.Yaw))
        print("\tAttitudeTimeTag: {}".format(self.AttitudeTimeTag))
        print("\tDOT: {}".format(self.DOT))
        print("\tNavFixMilliseconds: {}".format(self.NavFixMilliseconds))
        print("\tComputerClockHour: {}".format(self.ComputerClockHour))
        print("\tComputerClockMinute: {}".format(self.ComputerClockMinute))
        print("\tComputerClockSecond: {}".format(self.ComputerClockSecond))
        print("\tComputerClockHsec: {}".format(self.ComputerClockHsec))
        print("\tFishPositionDeltaX: {}".format(self.FishPositionDeltaX))
        print("\tFishPositionDeltaY: {}".format(self.FishPositionDeltaY))
        print("\tFishPositionErrorCode: {}".format(self.FishPositionErrorCode))
        print("\tOptionalOffset: {}".format(self.OptionalOffset))
        print("\tCableOutHundredths: {}".format(self.CableOutHundredths))
        print("\tReservedSpace2: {}".format(self.ReservedSpace2))

        for pch in self.XTF_ping_chan_header_list:
            pch.print()
